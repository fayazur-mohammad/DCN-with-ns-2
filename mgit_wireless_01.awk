################################################################################
# WIRELESS network scenarios
# This script analyses the tracefile generated by ns-2 simulator and computes
# various end-to-end data transfer performance parameters
#
# Author: Dr. Fayazur Rahaman M, Dept. ECE, MGIT, Hyderabad
# Version: 01 , 07 Dec 2021
# Suggestions : mfrahaman_ece@mgit.ac.in
# History
# Version 01: Basic Version
################################################################################
BEGIN {
  #txed = 0
  #rxed = 0
  #totPktRxedSz = 0
  #delay = avgDelay = 0
  #strTime = 1000
  #endTime = 0
}

{
  event = $1;  time = $2; node = $3;  layer = $4; seq_no = $6; type = $7;
  size = $8; 
  
  if ( pktsSent[seq_no] == 0 && event == "s" && layer == "AGT") {
    pktType[type] = 1
    
    if (pktSize_max[type] < size) pktSize_max[type] = size;
    pktSize_min[event ":" type ":" size]++

    pktTxed[seq_no] = time
    txed[type]++
    
    if (strTime[type] > time) strTime[type] = time ;
    if (endTime[type] < time) endTime[type] = time ;
  }
  
  split(FILENAME, parts, ".tr")
  file = parts[1] "-" type

  if (event == "r" && layer == "AGT") {
    totPktRxedSz[type] += size*8
    pktSize_min[event ":" type ":" size]++
    delay[type] += time - pktTxed[seq_no]
    rxed[type]++
    file = file "-th.dat"
    printf("%g\t%g\n",time,totPktRxedSz[type]/( (time-strTime[type]) *1000) ) > file
            
    if (endTime[type] < time) {
      endTime[type] = time
    }
  }

}

END {
  print "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  print "\t  ====> WIRELESS NETWORK <====="
  for (key in pktType) {
    if (rxed[key] != 0) {
      avgDelay = delay[key]/rxed[key]
      thput = totPktRxedSz[key]/ (endTime[key]-strTime[key])
      rxRatio = rxed[key]/txed[key] *100
      dropRatio = (txed[key] - rxed[key])/txed[key] *100
    }
    
    print "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    #printf("Src_addr->Dst_addr \t= %15s \n",  srcAddr[key] " -> " destAddr[key])
    printf("Pkt Type \t \t= %15s\n",key);
    printf("Pkt Size \t \t= %15s\n", pktSize_max[key]);
    printf("Transfer Start Time \t= %15.2f sec \n", strTime[key])
    printf("Transfer End Time \t= %15.2f sec \n", endTime[key])
    printf("# Sent Packets \t \t= %15.0f\n",txed[key]);
    printf("# Dropped Pkts \t\t= %15.0f\n", txed[key]-rxed[key]);
    #printf("->Due to Link Errors \t= %15.0f\n", dropPkts_err[key]);
    #printf("->Due to Broadcasts \t= %15.0f\n", discard_broadcast[key]);
    #printf("# Retransmitted Packets = %15.0f\n", retrans[key]);
    #printf("# Duplicate Packets \t= %15.0f\n", dupPkts[key]);
    printf("# Delivered Packets \t= %15.0f\n",rxed[key]);
    printf("Packet Delivery Ratio \t= %15.2f percent \n",rxRatio);
    printf("Packet Drop Ratio \t= %15.2f percent \n",dropRatio);
    
    printf("Average Delay \t \t= %15.4f secs\n",avgDelay);
    printf("Throughput \t \t= %15.2f bps\n",thput);
    
    #printf("Data transfer duration \t= %15.2f secs \n",duration);
  }
  for (i in pktSize_min){
    printf("Pkt Size \t \t= %15s,\tcount=%8s\n", i, pktSize_min[i]);
  }
}
